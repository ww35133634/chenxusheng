"""
演示多进程和多线程的区别
"""

import time
import multiprocessing

def sing():
    for i in range(3):
        print('bobo老师在唱歌......')
        time.sleep(1)

def dance():
    for i in range(3):
        print('bobo老师在跳舞******')
        time.sleep(1)

def main():
    # 利用多进程去完成多任务
    p1 = multiprocessing.Process(target=sing)  # 创建子进程A对象  等待
    p2 = multiprocessing.Process(target=dance)  # 创建子进程B对象 等待
    p1.start()  # 启动子进程A去指定的部分执行代码
    p2.start()  # 启动子进程A去指定的部分执行代码

if __name__ == '__main__':
    main()


"""
进程: 程序执行之后      代码的执行  +  要用到资源  = 进程
                           线程  是依赖于进程而存在是他的一部分
进程要用的资源比线程要大
多进程耗费的资源 比  多线程就 更大了
              
多线程的体现方式 : 在一个进程之内,, 多个线程分别去执行代码, 达到多任务的目的
多进程的体现方式:   一个子进程就拥有一份代码, 里面就有一个主线程去执行  多个进程就实现多任务

如果代码没有类似全局变量的自增操作,, 那么多进程会共享一份代码,,,,
但是如果有代码的改变,那么就会重新复制一份,,不会共享....     

多任务, 线程占用的资源小,,进程呢占用的资源大,,,,

"""

"""
进程之间是相互独立存在(空间不同) >>> 不能资源的共享 ,不能信息的传递
多进程去处理某些事情,,, 
爬虫的问题


A 爬取数据

B 清洗数据

C 保存数据
共享同一份数据的情况  

多进程 
不讲道理  >>> 进程间通信,, >>>  Queue队列
                    队列  先进先出
队列,,, 水管子    CBA=== CBA

                 先进后出
栈  ,,,  电梯     cba {}  abc  

"""























