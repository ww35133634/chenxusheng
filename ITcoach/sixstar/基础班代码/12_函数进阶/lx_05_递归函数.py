"""
演示递归函数
"""
"""
# 有个和尚给他的弟子讲了一个故事:
    "有个和尚给他的弟子讲了一个故事:
    "有个和尚给他的弟子讲了一个故事"
"""
# 1. 在函数内部调用自身
# 2. 有明确的停止标志 return

# def demo():
#     demo() # 在函数内部调用自身
#     return # 2. 有明确的停止标志 return


"""
作业:
利用递归函数去求斐波那契数列 0,1,1,2,3,5,8,13,21,34

"""

#                          调用函数的时候传过去的实参
#  假设我们调用了demo函数  得到1到100的累加求和结果  5050
#                         拆分  1到99的求和结果 + 100
#                               demo(99)  +  100  = demo(100) >>>  5050
#                         拆分 demo(98) + 99   + 100 = demo(100)  >>> 5050
#                        拆分 demo(97) + 98 + 99 + 100 = demo(100) >>> 5050
#                      拆分  demo(96) + 97 + 98 + 99 + 100 = demo(100) >>> 5050

# def demo(a):  # 100  99 98  97
#     if a == 1:
#         return 1
#     return (a - 1) + a # 得到数据
#
# # 1 到 100 的累加求和结果
# demo(100)  # 调用函数就会到函数定义部分去执行代码 demo(99) + 100
""" 调用函数  >>>  函数内部去执行代码
demo(99) + 100 
demo(98) + 99 +  100
demo(97) + 98 + 99 +  100
demo(96) + 97 + 98 + 99 +  100
......
......
......1 + 2 + ....97 + 98 + 99 +  100 =  5050
demo(1) .........................  # 停止  没有意义 a == 1 停止 return
不停的递减,,,,

"""
#    1 + 2 + 3 + 4 + 5  +  100(停止)  >>> 5050  # while循环
#  100 + 99 + 98  + 97 ....  +  1(停止) >>> 5050  递归
# def demo(a):  # 100  99 98  97    5050
#     if a == 1:  # 触发停止函数的条件
#         return 1
#     #         递减
#     return demo(a - 1) + a # 得到数据  >>> 函数内部调用函数 自身函数
#
# # 1 到 100 的累加求和结果
# i = demo(100)  # 调用函数就会到函数定义部分去执行代码 demo(99) + 100
# print(i)






# 函数间的调用层数 一百次 一百层函数的调用

def demo(a):  # 100  99 98  97    5050
    if a == 1:  # 触发停止函数的条件
        return 1
    return demo(a - 1) + a # 得到数据  >>> 函数内部调用函数 自身函数


i = demo(998)  # 500个函数间的调用 500 499 498 1  999 + 1 1000  998 + 1 + 1
print(i)

# 超出了函数调用层数的最大值 1000以下




"""
斐波那契数列
1,使用递归函数
2,使用普通函数
"""



























